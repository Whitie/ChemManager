# -*- coding: utf-8 -*-
# Generated by Django 1.10.1 on 2016-12-29 16:47
from __future__ import unicode_literals

import core.fields
import core.models.chems
import core.utils
from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Barcode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=100, unique=True, verbose_name='Code')),
                ('ident', models.CharField(blank=True, max_length=20, verbose_name='Supplier Ident. No.')),
                ('content', models.DecimalField(blank=True, decimal_places=4, max_digits=9, null=True, verbose_name='Content')),
                ('unit', models.CharField(blank=True, choices=[('µg', 'µg'), ('mg', 'mg'), ('g', 'g'), ('kg', 'kg'), ('mL', 'mL'), ('L', 'L')], max_length=2, verbose_name='Unit')),
            ],
            options={
                'verbose_name': 'Barcode',
                'ordering': ['chemical'],
                'verbose_name_plural': 'Barcodes',
            },
        ),
        migrations.CreateModel(
            name='Bookmark',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.CharField(max_length=100, verbose_name='URL')),
                ('text', models.CharField(max_length=100, verbose_name='Text')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookmarks', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Bookmark',
                'ordering': ['text'],
                'verbose_name_plural': 'Bookmarks',
            },
        ),
        migrations.CreateModel(
            name='Building',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Name')),
                ('identifier', models.CharField(blank=True, max_length=10, verbose_name='Identifier')),
                ('street', models.CharField(max_length=100, verbose_name='Street')),
                ('zip_code', models.CharField(max_length=20, verbose_name='ZIP Code')),
                ('city', models.CharField(max_length=100, verbose_name='City')),
                ('country', models.CharField(max_length=100, verbose_name='Country')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
            ],
            options={
                'verbose_name': 'Building',
                'ordering': ['name'],
                'verbose_name_plural': 'Buildings',
            },
        ),
        migrations.CreateModel(
            name='Chapter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Title')),
                ('number', models.PositiveIntegerField(verbose_name='Number')),
                ('synopsis', models.TextField(blank=True, verbose_name='Synopsis')),
            ],
            options={
                'verbose_name': 'Chapter',
                'ordering': ['number'],
                'verbose_name_plural': 'Chapters',
            },
        ),
        migrations.CreateModel(
            name='ChapterComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=50, verbose_name='Title')),
                ('text', models.TextField(verbose_name='Text')),
                ('added', models.DateTimeField(auto_now_add=True, verbose_name='Added')),
                ('author', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='paragraph_comments', to=settings.AUTH_USER_MODEL, verbose_name='Author')),
                ('chapter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='core.Chapter', verbose_name='Chapter')),
            ],
            options={
                'verbose_name': 'Chapter Comment',
                'permissions': (('can_moderate_comments', 'Can moderate comments'),),
                'get_latest_by': 'added',
                'ordering': ['chapter', '-added'],
                'verbose_name_plural': 'Chapter Comments',
            },
        ),
        migrations.CreateModel(
            name='Chemical',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Name')),
                ('name_en', models.CharField(blank=True, max_length=200, verbose_name='Name (en)')),
                ('slug', models.SlugField(max_length=200, unique=True, verbose_name='Slug')),
                ('iupac_name', models.CharField(blank=True, max_length=200, verbose_name='IUPAC Name')),
                ('iupac_name_en', models.CharField(blank=True, max_length=200, verbose_name='IUPAC Name (en)')),
                ('structure', models.FileField(blank=True, upload_to=core.utils.structure_path, verbose_name='Structure')),
                ('formula', models.CharField(blank=True, max_length=200, verbose_name='Molecular Formula')),
                ('molar_mass', models.DecimalField(blank=True, decimal_places=4, max_digits=12, null=True, verbose_name='Molar Mass')),
                ('flammable', models.BooleanField(default=False, verbose_name='Flammable')),
                ('storage_temperature', models.CharField(choices=[('super_frosted', 'super frosted (-80°C)'), ('frosted', 'frosted (-18°C)'), ('cold', 'cold (4°C)'), ('normal', 'normal (15 - 25°C)'), ('special', 'special (give temp. in properties)')], default='normal', max_length=15, verbose_name='Storage Temperature')),
                ('storage_temperature_special', models.IntegerField(blank=True, help_text='Only give a temperature here if you have selected "special" on Storage Temperature field.', null=True, verbose_name='Special Temperature')),
                ('signal_word', models.CharField(blank=True, choices=[('', '-'), ('danger', 'Danger'), ('warning', 'Warning')], max_length=25, verbose_name='Signal Word')),
                ('whc', models.PositiveSmallIntegerField(choices=[(0, '0 - Non-hazardous to water'), (1, '1 - Low hazard to waters'), (2, '2 - Hazard to waters'), (3, '3 - Severe hazard to waters')], default=0, help_text='Water Hazard Class', verbose_name='WHC')),
                ('mac', models.DecimalField(blank=True, decimal_places=4, help_text='Maximum Allowable Concentration', max_digits=10, null=True, verbose_name='MAC')),
                ('mac_unit', models.CharField(blank=True, choices=[('mg/m3', 'mg/m3'), ('mg/L', 'mg/L'), ('mL/m3', 'mL/m3')], max_length=5, verbose_name='MAC Unit')),
                ('mabc', models.DecimalField(blank=True, decimal_places=4, help_text='Maximum Allowable Biological Concentration', max_digits=10, null=True, verbose_name='MABC')),
                ('mabc_unit', models.CharField(blank=True, choices=[('mg/m3', 'mg/m3'), ('mg/L', 'mg/L'), ('mL/m3', 'mL/m3')], max_length=5, verbose_name='MABC Unit')),
                ('mac_old', models.DecimalField(blank=True, decimal_places=4, help_text='Maximum Allowable Concentration (old)', max_digits=10, null=True, verbose_name='MAC (old)')),
                ('mac_old_unit', models.CharField(blank=True, choices=[('mg/m3', 'mg/m3'), ('mg/L', 'mg/L'), ('mL/m3', 'mL/m3')], max_length=5, verbose_name='MAC (old) Unit')),
                ('boelv', models.DecimalField(blank=True, decimal_places=4, help_text='Binding Occupational Exposure Limit (mg/m3)', max_digits=10, null=True, verbose_name='BOELV')),
                ('ioelv', models.DecimalField(blank=True, decimal_places=4, help_text='Indicative Occupational Exposure Limit (mg/m3)', max_digits=10, null=True, verbose_name='IOELV')),
                ('hin', models.CharField(blank=True, help_text='Hazard Identification Number', max_length=5, verbose_name='HIN')),
                ('ext_media', models.TextField(blank=True, verbose_name='Extinguishing Media')),
                ('un_ext_media', models.TextField(blank=True, verbose_name='Unsuitable Extinguishing Media')),
                ('fire_advice', models.TextField(blank=True, verbose_name='Fire Advice')),
                ('wiki_link', models.CharField(blank=True, max_length=100, verbose_name='Wikipedia Link')),
                ('special_log', models.BooleanField(default=False, help_text='Set this if you need detailed information about usage of this substance.', verbose_name='Special Log')),
                ('cmr', models.BooleanField(default=False, verbose_name='CMR Substance')),
                ('active', models.BooleanField(default=True, help_text='Only active chemicals are displayed in lists.', verbose_name='Active')),
                ('added', models.DateTimeField(auto_now_add=True, verbose_name='Added')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='Last Updated')),
                ('added_by', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Added by')),
            ],
            options={
                'verbose_name': 'Chemical',
                'permissions': (('manage', 'Can manage chemicals'),),
                'ordering': ['name'],
                'verbose_name_plural': 'Chemicals',
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('street', models.CharField(blank=True, max_length=100, verbose_name='Street')),
                ('zip_code', models.CharField(blank=True, max_length=20, verbose_name='ZIP Code')),
                ('city', models.CharField(blank=True, max_length=100, verbose_name='City')),
                ('country', models.CharField(blank=True, max_length=100, verbose_name='Country')),
                ('phone', models.CharField(blank=True, max_length=30, verbose_name='Phone')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='Email')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('short_name', models.CharField(blank=True, max_length=20, verbose_name='Short Name')),
                ('logo', models.ImageField(blank=True, upload_to='logos', verbose_name='Logo')),
                ('fax', models.CharField(blank=True, max_length=30, verbose_name='Fax Number')),
                ('url', models.URLField(blank=True, verbose_name='Webpage')),
                ('customer_number', models.CharField(blank=True, max_length=50, verbose_name='Customer Number')),
            ],
            options={
                'verbose_name': 'Company',
                'ordering': ['name'],
                'verbose_name_plural': 'Companies',
            },
        ),
        migrations.CreateModel(
            name='Consume',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.DecimalField(decimal_places=4, max_digits=9, verbose_name='Quantity')),
                ('unit', models.CharField(choices=[('µg', 'µg'), ('mg', 'mg'), ('g', 'g'), ('kg', 'kg'), ('mL', 'mL'), ('L', 'L')], max_length=2, verbose_name='Unit')),
                ('opened', models.DateField(verbose_name='Opened')),
                ('stored', models.DateField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Consume',
                'ordering': ['-stored'],
                'verbose_name_plural': 'Consumes',
            },
        ),
        migrations.CreateModel(
            name='ContactPerson',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_name', models.CharField(max_length=50, verbose_name='Last Name')),
                ('first_name', models.CharField(blank=True, max_length=50, verbose_name='First Name')),
                ('direct_dialing', models.CharField(blank=True, max_length=30, verbose_name='Direct Dialing')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='Email')),
                ('responsible_for', models.CharField(blank=True, max_length=50, verbose_name='Responsible for')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contact_persons', to='core.Company', verbose_name='Company')),
            ],
            options={
                'verbose_name': 'Contact Person',
                'ordering': ['company__name', 'last_name'],
                'verbose_name_plural': 'Contact Persons',
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('users', models.ManyToManyField(blank=True, related_name='departments', to=settings.AUTH_USER_MODEL, verbose_name='Employee')),
            ],
            options={
                'verbose_name': 'Department',
                'ordering': ['name'],
                'verbose_name_plural': 'Departments',
            },
        ),
        migrations.CreateModel(
            name='DisposalInstructions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('method', models.CharField(max_length=50, verbose_name='Method')),
                ('chemical', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='disposal_instructions', to='core.Chemical', verbose_name='Chemical')),
            ],
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('internal_phone', models.CharField(blank=True, max_length=30, verbose_name='Internal Phone')),
                ('settings', core.fields.JSONField(editable=False, verbose_name='Settings')),
                ('ozone_id', models.PositiveIntegerField(default=None, editable=False, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
        ),
        migrations.CreateModel(
            name='EUHazardStatement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ref', models.CharField(max_length=25, verbose_name='Reference')),
                ('text', models.TextField(verbose_name='Text')),
                ('sortorder', models.PositiveIntegerField(editable=False, verbose_name='Sortorder')),
                ('combined', models.BooleanField(default=False, verbose_name='Combined')),
            ],
            options={
                'abstract': False,
                'ordering': ['sortorder'],
            },
        ),
        migrations.CreateModel(
            name='GHSPictogram',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('image', models.FileField(upload_to='ghs', verbose_name='Image')),
                ('ref_num', models.PositiveIntegerField(unique=True, verbose_name='Reference Number')),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, verbose_name='Name')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('active', models.BooleanField(default=True, verbose_name='Active')),
            ],
            options={
                'verbose_name': 'Group',
                'ordering': ['name'],
                'verbose_name_plural': 'Groups',
            },
        ),
        migrations.CreateModel(
            name='Handbook',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Title')),
            ],
            options={
                'verbose_name': 'Handbook',
                'permissions': (('can_write_handbook', 'Can write handbook'),),
                'ordering': ['title'],
                'verbose_name_plural': 'Handbooks',
            },
        ),
        migrations.CreateModel(
            name='HandbookImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.FileField(upload_to='handbook', verbose_name='Image')),
                ('width', models.PositiveIntegerField(default=200, help_text='This width is to show the image inside the text. The image tag is generally rendered with a link to the full size image.', verbose_name='Width')),
            ],
        ),
        migrations.CreateModel(
            name='HazardStatement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ref', models.CharField(max_length=25, verbose_name='Reference')),
                ('text', models.TextField(verbose_name='Text')),
                ('sortorder', models.PositiveIntegerField(editable=False, verbose_name='Sortorder')),
                ('combined', models.BooleanField(default=False, verbose_name='Combined')),
            ],
            options={
                'abstract': False,
                'ordering': ['sortorder'],
            },
        ),
        migrations.CreateModel(
            name='Identifiers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cas', models.CharField(blank=True, help_text='CAS = Chemical Abstract Service', max_length=12, validators=[core.models.chems.validate_cas], verbose_name='CAS Registry Number')),
                ('un', models.PositiveIntegerField(blank=True, null=True, verbose_name='UN Number')),
                ('einecs', models.CharField(blank=True, help_text='European Community Number (EC No., EINECS No., EC#)', max_length=9, validators=[core.models.chems.validate_ecn], verbose_name='EC Number')),
                ('inchi', models.TextField(blank=True, help_text='InChI = International Chemical Identifier', verbose_name='InChI')),
                ('inchi_key', models.CharField(blank=True, max_length=30, verbose_name='InChI-Key')),
                ('smiles', models.TextField(blank=True, help_text='SMILES = Simplified Molecular Input Line Entry Specification', verbose_name='SMILES')),
                ('pubchem_id', models.PositiveIntegerField(blank=True, null=True, verbose_name='PubChem Compound ID')),
                ('drugbank', models.CharField(blank=True, max_length=15, verbose_name='DrugBank')),
                ('kegg', models.CharField(blank=True, help_text='KEGG = Kyoto Encyclopedia of Genes and Genomes', max_length=15, verbose_name='KEGG Number')),
                ('imported_from', models.FileField(blank=True, upload_to='msds/ref', verbose_name='Imported from')),
                ('chemical', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='identifiers', to='core.Chemical', verbose_name='Chemical')),
            ],
            options={
                'verbose_name': 'Identifiers',
                'verbose_name_plural': 'Identifiers',
            },
        ),
        migrations.CreateModel(
            name='InventoryDifference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.DecimalField(decimal_places=4, max_digits=9, verbose_name='Value')),
                ('unit', models.CharField(choices=[('µg', 'µg'), ('mg', 'mg'), ('g', 'g'), ('kg', 'kg'), ('mL', 'mL'), ('L', 'L')], max_length=2, verbose_name='Unit')),
                ('saved', models.DateTimeField(auto_now_add=True, verbose_name='Saved')),
                ('note', models.TextField(blank=True, verbose_name='Note')),
            ],
            options={
                'verbose_name': 'Inventory Difference',
                'ordering': ['package', 'saved'],
                'verbose_name_plural': 'Inventory Differences',
            },
        ),
        migrations.CreateModel(
            name='JournalEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField(verbose_name='Message')),
                ('user_message', models.CharField(blank=True, max_length=200, verbose_name='User Message')),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('added', models.DateTimeField(auto_now_add=True, verbose_name='Added')),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'verbose_name': 'Journal Entry',
                'ordering': ['-added'],
                'verbose_name_plural': 'Journal Entries',
            },
        ),
        migrations.CreateModel(
            name='JournalType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'Journal Type',
                'ordering': ['name'],
                'verbose_name_plural': 'Journal Types',
            },
        ),
        migrations.CreateModel(
            name='LegalLimit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ident', models.CharField(max_length=5, verbose_name='Ident')),
                ('text', models.CharField(blank=True, max_length=150, verbose_name='Name')),
                ('reference', models.CharField(blank=True, max_length=150, verbose_name='Reference')),
                ('type', models.CharField(choices=[('min', 'Minimum'), ('max', 'Maximum')], max_length=3, verbose_name='Type')),
                ('threshold', models.DecimalField(decimal_places=1, max_digits=7, verbose_name='Threshold')),
                ('percent_of_threshold', models.DecimalField(decimal_places=1, default=Decimal('2'), max_digits=4, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))], verbose_name='Percent of Threshold')),
                ('stock', models.DecimalField(decimal_places=1, editable=False, max_digits=7, verbose_name='Limit')),
                ('unit', models.CharField(choices=[('µg', 'µg'), ('mg', 'mg'), ('g', 'g'), ('kg', 'kg'), ('mL', 'mL'), ('L', 'L')], default='kg', max_length=2, verbose_name='Unit')),
                ('buildings', models.ManyToManyField(related_name='limits', to='core.Building', verbose_name='Buildings')),
                ('chemicals', models.ManyToManyField(related_name='limits', to='core.Chemical', verbose_name='Chemicals')),
            ],
            options={
                'verbose_name': 'Legal Limit',
                'ordering': ['ident'],
                'verbose_name_plural': 'Legal Limits',
            },
        ),
        migrations.CreateModel(
            name='ListCache',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('hash', models.CharField(editable=False, max_length=32, unique=True)),
                ('json_query', core.fields.JSONField(verbose_name='JSON Query')),
                ('added', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'List Cache',
                'ordering': ['-added'],
                'verbose_name_plural': 'List Caches',
            },
        ),
        migrations.CreateModel(
            name='MaterialSafetyDataSheet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('published', models.DateField(verbose_name='Published')),
                ('document', models.FileField(upload_to='msds/%Y/%m', verbose_name='Document')),
                ('last_updated', models.DateField(auto_now=True, verbose_name='Last Updated')),
            ],
            options={
                'verbose_name': 'Material Safety Data Sheet',
                'permissions': (('can_review', 'Can review MSDS'),),
                'ordering': ['-published'],
                'verbose_name_plural': 'Material Safety Data Sheets',
            },
        ),
        migrations.CreateModel(
            name='OperatingInstruction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('document', models.FileField(upload_to='operating_instructions/%Y', verbose_name='Document')),
                ('added', models.DateField(auto_now_add=True)),
                ('last_updated', models.DateField(auto_now=True)),
                ('chemical', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='operating_instructions', to='core.Chemical', verbose_name='Chemical')),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='operating_instructions', to='core.Department', verbose_name='Department')),
                ('last_updated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Last updated by')),
            ],
            options={
                'verbose_name': 'Operating Instruction',
                'ordering': ['department__name', 'chemical__name'],
                'verbose_name_plural': 'Operating Instructions',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.PositiveSmallIntegerField(default=1, verbose_name='Count')),
                ('stored', models.DateTimeField(auto_now_add=True)),
                ('sent', models.DateTimeField(blank=True, default=None, editable=False, null=True)),
                ('delivered_count', models.PositiveSmallIntegerField(default=0, verbose_name='Delivered')),
                ('last_delivery', models.DateTimeField(blank=True, default=None, editable=False, null=True)),
                ('complete', models.BooleanField(default=False, editable=False)),
                ('barcode', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='core.Barcode', verbose_name='Barcode')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='orders', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Order',
                'permissions': (('can_order', 'Can order chemicals'),),
                'ordering': ['-stored'],
                'verbose_name_plural': 'Orders',
            },
        ),
        migrations.CreateModel(
            name='PackageUsage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mass_after', models.DecimalField(blank=True, decimal_places=4, max_digits=9, null=True, verbose_name='Mass after usage')),
                ('mass_after_unit', models.CharField(choices=[('µg', 'µg'), ('mg', 'mg'), ('g', 'g'), ('kg', 'kg')], default='g', max_length=2, verbose_name='Mass after Unit')),
                ('removed_quantity', models.DecimalField(blank=True, decimal_places=4, max_digits=9, null=True, verbose_name='Removed Quantity')),
                ('removed_quantity_unit', models.CharField(choices=[('µg', 'µg'), ('mg', 'mg'), ('g', 'g'), ('kg', 'kg'), ('mL', 'mL'), ('L', 'L')], default='g', max_length=2, verbose_name='Removed Quantity Unit')),
                ('usage_date', models.DateTimeField(auto_now_add=True, verbose_name='Usage Date/Time')),
                ('task', models.TextField(blank=True, verbose_name='Task')),
                ('is_inventory', models.BooleanField(default=False, verbose_name='Is Inventory')),
                ('group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='used_packages', to='core.Group', verbose_name='Group')),
            ],
            options={
                'verbose_name': 'Package Usage',
                'ordering': ['package', '-usage_date'],
                'verbose_name_plural': 'Package Usages',
            },
        ),
        migrations.CreateModel(
            name='Paragraph',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Title')),
                ('number', models.PositiveIntegerField(verbose_name='Number')),
                ('lead', models.TextField(blank=True, verbose_name='Lead')),
                ('text', models.TextField(blank=True, verbose_name='Text')),
                ('added', models.DateTimeField(auto_now_add=True, verbose_name='Added')),
                ('last_modified', models.DateTimeField(auto_now=True, verbose_name='Last modified')),
                ('author', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='added_paragraphs', to=settings.AUTH_USER_MODEL, verbose_name='Author')),
                ('chapter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='paragraphs', to='core.Chapter', verbose_name='Chapter')),
                ('last_modified_by', models.ForeignKey(blank=True, default=None, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='modified_paragraphs', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by')),
            ],
            options={
                'verbose_name': 'Paragraph',
                'ordering': ['number'],
                'verbose_name_plural': 'Paragraphs',
            },
        ),
        migrations.CreateModel(
            name='PhysicalData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('physical_state', models.CharField(blank=True, choices=[('s', 'solid'), ('l', 'liquid'), ('g', 'gaseous')], max_length=1, verbose_name='Physical State')),
                ('color', models.CharField(blank=True, max_length=30, verbose_name='Color')),
                ('odor', models.CharField(blank=True, max_length=30, verbose_name='Odor')),
                ('density', models.DecimalField(blank=True, decimal_places=4, help_text='In g/cm3.', max_digits=10, null=True, verbose_name='Density')),
                ('density_temp', models.IntegerField(blank=True, help_text='In °C.', null=True, verbose_name='Density at Temperature')),
                ('bulk_density', models.DecimalField(blank=True, decimal_places=4, help_text='In kg/m3.', max_digits=10, null=True, verbose_name='Bulk Density')),
                ('melting_point_low', models.DecimalField(blank=True, decimal_places=1, help_text='If this chemical has a defined melting point use only this field. Give in °C.', max_digits=5, null=True, verbose_name='Melting Point low')),
                ('melting_point_high', models.DecimalField(blank=True, decimal_places=1, help_text='In °C.', max_digits=5, null=True, verbose_name='Melting Point high')),
                ('boiling_point_low', models.DecimalField(blank=True, decimal_places=1, help_text='If this chemical has a defined boiling point use only this field. Give in °C.', max_digits=5, null=True, verbose_name='Boiling Point low')),
                ('boiling_point_high', models.DecimalField(blank=True, decimal_places=1, help_text='In °C.', max_digits=5, null=True, verbose_name='Boiling Point high')),
                ('solubility_h2o', models.DecimalField(blank=True, decimal_places=4, help_text='In g/100g.', max_digits=10, null=True, verbose_name='Solubility (H2O)')),
                ('solubility_h2o_temp', models.IntegerField(blank=True, help_text='In °C.', null=True, verbose_name='Solubility at Temperature')),
                ('chemical', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='physical_data', to='core.Chemical', verbose_name='Chemical')),
            ],
            options={
                'verbose_name': 'Physical Data',
                'ordering': ['chemical__name'],
                'verbose_name_plural': 'Physical Data',
            },
        ),
        migrations.CreateModel(
            name='PrecautionaryStatement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ref', models.CharField(max_length=25, verbose_name='Reference')),
                ('text', models.TextField(verbose_name='Text')),
                ('sortorder', models.PositiveIntegerField(editable=False, verbose_name='Sortorder')),
                ('combined', models.BooleanField(default=False, verbose_name='Combined')),
            ],
            options={
                'abstract': False,
                'ordering': ['sortorder'],
            },
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, verbose_name='Name')),
                ('number', models.CharField(blank=True, max_length=15, verbose_name='Number')),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rooms', to='core.Building', verbose_name='Building')),
            ],
            options={
                'verbose_name': 'Room',
                'ordering': ['building', 'storage', 'name'],
                'verbose_name_plural': 'Rooms',
            },
        ),
        migrations.CreateModel(
            name='StockLimit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('min', 'Minimum'), ('max', 'Maximum')], max_length=3, verbose_name='Type')),
                ('stock', models.DecimalField(decimal_places=1, max_digits=5, verbose_name='Limit')),
                ('unit', models.CharField(choices=[('µg', 'µg'), ('mg', 'mg'), ('g', 'g'), ('kg', 'kg'), ('mL', 'mL'), ('L', 'L')], default='g', max_length=2, verbose_name='Unit')),
                ('chemical', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stock_limits', to='core.Chemical', verbose_name='Chemical')),
            ],
            options={
                'verbose_name': 'Stock Limit',
                'ordering': ['storage'],
                'verbose_name_plural': 'Stock Limits',
            },
        ),
        migrations.CreateModel(
            name='Storage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Name')),
                ('type', models.CharField(choices=[('general', 'General Storage'), ('through', 'Through Storage'), ('solids', 'Solids Storage'), ('solvents', 'Solvent Storage')], max_length=10, verbose_name='Type')),
                ('consumption', models.BooleanField(default=False, verbose_name='Consumption')),
                ('observe', models.BooleanField(default=False, verbose_name='Observe')),
                ('lockable', models.BooleanField(default=False, verbose_name='Lockable')),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='storages', to='core.Building', verbose_name='Building')),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='storages', to='core.Department', verbose_name='Department')),
            ],
            options={
                'verbose_name': 'Storage',
                'permissions': (('can_store', 'Can store chemicals'), ('can_consume', 'Can consume chemicals'), ('can_transfer', 'Can transfer chemicals'), ('can_dispose', 'Can dispose chemicals'), ('inventory', 'Can make inventory')),
                'ordering': ['department', 'name'],
                'verbose_name_plural': 'Storages',
            },
        ),
        migrations.CreateModel(
            name='StorageClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=5, unique=True, verbose_name='Value')),
                ('description', models.CharField(max_length=100, verbose_name='Description')),
                ('store_with', core.fields.JSONField(blank=True, verbose_name='Storage Restrictions')),
            ],
            options={
                'verbose_name': 'Storage Class',
                'ordering': ['value'],
                'verbose_name_plural': 'Storage Classes',
            },
        ),
        migrations.CreateModel(
            name='StoragePlace',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('lockable', models.BooleanField(default=False, verbose_name='Lockable')),
                ('room', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='places', to='core.Room', verbose_name='Room')),
                ('storage', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='places', to='core.Storage', verbose_name='Storage')),
            ],
            options={
                'verbose_name': 'Storage Place',
                'ordering': ['storage', 'name'],
                'verbose_name_plural': 'Storage Places',
            },
        ),
        migrations.CreateModel(
            name='StorageRestriction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ref_num', models.PositiveIntegerField(verbose_name='Reference Number')),
                ('text', models.TextField(verbose_name='Text')),
                ('is_html', models.BooleanField(default=False, help_text='Check this if the text is HTML.', verbose_name='Is HTML')),
            ],
            options={
                'verbose_name': 'Storage Restriction',
                'ordering': ['ref_num'],
                'verbose_name_plural': 'Storage Restrictions',
            },
        ),
        migrations.CreateModel(
            name='StoredChemical',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_extra', models.CharField(blank=True, max_length=100, verbose_name='Name extra')),
                ('quality', models.CharField(blank=True, choices=[('selfmade', 'Self made'), ('technical', 'technically'), ('synthesis', 'for synthesis'), ('pheur', 'Ph. Eur.'), ('analysis', 'for analysis'), ('special', 'special')], default='', help_text='Choose special here if no quality match. Give exact quality in the extra field.', max_length=15, verbose_name='Quality')),
                ('chemical', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='storage', to='core.Chemical', verbose_name='Chemical')),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='stored_chemicals', to='core.Company', verbose_name='Company')),
                ('msds', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='stored_chemicals', to='core.MaterialSafetyDataSheet', verbose_name='Material Safety Data Sheet')),
            ],
            options={
                'verbose_name': 'Stored Chemical',
                'ordering': ['chemical'],
                'verbose_name_plural': 'Stored Chemicals',
            },
        ),
        migrations.CreateModel(
            name='StoredPackage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.DecimalField(decimal_places=4, max_digits=9, verbose_name='Content')),
                ('unit', models.CharField(choices=[('µg', 'µg'), ('mg', 'mg'), ('g', 'g'), ('kg', 'kg'), ('mL', 'mL'), ('L', 'L')], max_length=2, verbose_name='Unit')),
                ('composition', models.CharField(blank=True, choices=[('liquid', 'liquid'), ('semi-solid', 'semi-solid'), ('micronized', 'micronized'), ('powdered', 'powdered'), ('crystalline', 'crystalline'), ('granules', 'Granules')], default='', max_length=15, verbose_name='Composition')),
                ('container_material', models.CharField(choices=[('plastic', 'Plastic'), ('glass', 'Glass'), ('alu', 'Aluminium'), ('carton', 'Carton'), ('bag', 'Bag'), ('barrel', 'Barrel'), ('pallet', 'Pallet')], default='plastic', max_length=10, verbose_name='Container Material')),
                ('content_default', models.DecimalField(decimal_places=5, editable=False, max_digits=15)),
                ('supplier_ident', models.CharField(blank=True, max_length=20, verbose_name='Supplier Ident. No.')),
                ('supplier_code', models.CharField(blank=True, max_length=100, verbose_name='Supplier Barcode')),
                ('supplier_batch', models.CharField(blank=True, max_length=30, verbose_name='Supplier Batch No.')),
                ('best_before', models.DateField(blank=True, null=True, verbose_name='Best before')),
                ('brutto_mass', models.DecimalField(blank=True, decimal_places=4, help_text='Mass of the unopened package.', max_digits=9, null=True, verbose_name='Brutto Mass')),
                ('brutto_mass_unit', models.CharField(choices=[('µg', 'µg'), ('mg', 'mg'), ('g', 'g'), ('kg', 'kg')], default='g', max_length=2, verbose_name='Brutto Mass Unit')),
                ('stored', models.DateTimeField(auto_now_add=True, verbose_name='Stored')),
                ('chemical_id', models.PositiveIntegerField(editable=False)),
                ('empty', models.BooleanField(default=False, verbose_name='Empty')),
                ('consume_archived', models.BooleanField(default=False, editable=False)),
                ('dispose_reason', models.CharField(blank=True, default='', max_length=100, verbose_name='Dispose Reason')),
                ('disposed_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Stored by')),
                ('place', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='packages', to='core.StoragePlace', verbose_name='Storage Place')),
                ('stored_by', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='stored_packages', to=settings.AUTH_USER_MODEL, verbose_name='Stored by')),
                ('stored_chemical', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='packages', to='core.StoredChemical', verbose_name='Stored Chemical')),
            ],
            options={
                'verbose_name': 'Stored Package',
                'ordering': ['place', 'stored_chemical'],
                'verbose_name_plural': 'Stored Packages',
            },
        ),
        migrations.CreateModel(
            name='Synonym',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Name')),
                ('chemical', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='synonyms', to='core.Chemical', verbose_name='Chemical')),
            ],
            options={
                'verbose_name': 'Synonym',
                'ordering': ['chemical__name', 'name'],
                'verbose_name_plural': 'Synonyms',
            },
        ),
        migrations.AddField(
            model_name='stocklimit',
            name='storage',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stock_limits', to='core.Storage', verbose_name='Storage'),
        ),
        migrations.AddField(
            model_name='room',
            name='storage',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rooms', to='core.Storage', verbose_name='Storage'),
        ),
        migrations.AddField(
            model_name='packageusage',
            name='package',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usage', to='core.StoredPackage', verbose_name='Package'),
        ),
        migrations.AddField(
            model_name='packageusage',
            name='used_by',
            field=models.ForeignKey(blank=True, default=None, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='packageusage',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='package_usages', to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AddField(
            model_name='journalentry',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entries', to='core.JournalType', verbose_name='Type'),
        ),
        migrations.AddField(
            model_name='journalentry',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='journal_entries', to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AddField(
            model_name='inventorydifference',
            name='package',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='differences', to='core.StoredPackage', verbose_name='Package'),
        ),
        migrations.AddField(
            model_name='inventorydifference',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AddField(
            model_name='consume',
            name='department',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='consumes', to='core.Department', verbose_name='Department'),
        ),
        migrations.AddField(
            model_name='consume',
            name='stored_chemical',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='consumes', to='core.StoredChemical', verbose_name='Stored Chemical'),
        ),
        migrations.AddField(
            model_name='chemical',
            name='eu_hazard_statements',
            field=models.ManyToManyField(blank=True, related_name='chemicals', to='core.EUHazardStatement', verbose_name='EU Hazard Statements'),
        ),
        migrations.AddField(
            model_name='chemical',
            name='hazard_statements',
            field=models.ManyToManyField(blank=True, related_name='chemicals', to='core.HazardStatement', verbose_name='Hazard Statements'),
        ),
        migrations.AddField(
            model_name='chemical',
            name='pictograms',
            field=models.ManyToManyField(blank=True, related_name='chemicals', to='core.GHSPictogram', verbose_name='GHS Pictograms'),
        ),
        migrations.AddField(
            model_name='chemical',
            name='precautionary_statements',
            field=models.ManyToManyField(blank=True, related_name='chemicals', to='core.PrecautionaryStatement', verbose_name='Precautionary Statements'),
        ),
        migrations.AddField(
            model_name='chemical',
            name='storage_class',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='chemicals', to='core.StorageClass', verbose_name='Storage Class'),
        ),
        migrations.AddField(
            model_name='chapter',
            name='handbook',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chapters', to='core.Handbook', verbose_name='Handbook'),
        ),
        migrations.AddField(
            model_name='barcode',
            name='chemical',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='barcodes', to='core.Chemical', verbose_name='Chemical'),
        ),
        migrations.AddField(
            model_name='barcode',
            name='stored_chemical',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='barcodes', to='core.StoredChemical', verbose_name='Stored Chemical'),
        ),
        migrations.AlterUniqueTogether(
            name='storedchemical',
            unique_together=set([('chemical', 'company', 'quality', 'name_extra')]),
        ),
        migrations.AlterUniqueTogether(
            name='stocklimit',
            unique_together=set([('chemical', 'storage', 'type')]),
        ),
    ]
